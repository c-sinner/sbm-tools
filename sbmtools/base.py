import uuid
from datetime import date
from contextlib import ContextDecorator
from typing import Tuple

from sbmtools.utils import convert_numericals


class WriteMixin(object):
    def __init__(self, *args, **kwargs):
        self.args = args
        self.kwargs = kwargs
        self._data = [convert_numericals(arg) for arg in args]

    def __getitem__(self, item):
        return self._data[item]

    def __str__(self):
        return self.write()

    def write(self, write_header=False, header="", line_delimiter="\n", item_delimiter=" "):
        items = item_delimiter.join([str(item) for item in self._data])
        kwargs = item_delimiter.join([str(value) for value in self.kwargs.values()])

        output = items + item_delimiter + kwargs if kwargs else items

        if write_header:
            return header + line_delimiter + output
        else:
            return output


class ParameterFileEntry(WriteMixin, object):
    def __init__(self, *args, **kwargs):
        super(ParameterFileEntry, self).__init__(*args, **kwargs)

    def __repr__(self):
        return "<{0} {1} {2}>".format(self.__class__.__name__,
                                      "  ".join([str(item) for item in self._data]),
                                      " ".join(["{0}: {1}".format(*item) for item in self.kwargs.items()])
                                      )

    def write(self, write_header=False, header="", line_delimiter="\n", item_delimiter=" "): #TODO: Do the parameters come from the outside only?
        item_delimiter = ""
        return super(ParameterFileEntry, self).write(write_header, header, line_delimiter, item_delimiter)


class ParameterFileComment(ParameterFileEntry):
    def __init__(self, *args, **kwargs):
        super(ParameterFileComment, self).__init__(*args, **kwargs)

    def write(self, write_header=False, header="", line_delimiter="\n", item_delimiter=" ", comment_character=';'):
        item_delimiter = ""
        output = super(ParameterFileComment, self).write(False, item_delimiter=item_delimiter)
        return comment_character + output


class AbstractParameterFileParser(ContextDecorator):
    """
    Context manager and Iterator for opening a file and looping through its lines.

    The readline method can be overloaded to create more specific parsers.
    """

    def __init__(self, path: str = None, start: int = 0):
        self.num = start
        self.attribute_name = "_data"
        self.path = path

    def __enter__(self):
        self.file_stream = open(self.path, 'r')
        return self

    def __exit__(self, *exc):
        self.file_stream.close()
        return False

    def __iter__(self):
        return self

    def __next__(self):
        self.num += 1
        return self.readline()

    def readline(self) -> Tuple[str, str]:
        value = self.file_stream.readline()
        if value:
            return self.attribute_name, value
        else:
            raise StopIteration


class AbstractParameterFile(WriteMixin, object):
    parser = AbstractParameterFileParser

    def __init__(self, *args, **kwargs):
        super(AbstractParameterFile, self).__init__(*args, **kwargs)
        self.header = '; Automated top file generated by sbmtools on the {0} with uuid {1}'.format(
            date.today().isoformat(),
            uuid.uuid4().hex)

    def __str__(self) -> str:
        return super(AbstractParameterFile, self).__str__()

    def save(self, path: str) -> None:
        output = self.write()
        with open(path, 'w') as output_stream:
            output_stream.write(output)

    def load(self, path: str) -> None:
        """Create FileParser and loop through lines which are returned as (Section, Content) tuples."""
        with self.parser(path) as input_stream:
            for line in input_stream:
                self.process_line(*line)

    def process_line(self, attr: str, line: str):
        """Save the (Section, Content) tuples in dynamic attribute of name SECTION. Strip comments."""
        try:
            getattr(self, attr).append(line)
        except AttributeError:
            setattr(self, attr, line)
        except TypeError:
            # Check if we wanted to pass a comment. Comments can be discarded when an attribute list does not accept
            # them.
            if isinstance(line, ParameterFileComment):
                pass
            else:
                raise
